{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; more optimization:
;;; aparently removing x wasn't good
;;; make it better later with every 50 number idea
(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() {
}


;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  ;; optimization
  if(k == 0){
    return empty_tuple();
  }
  
  tuple result = empty_tuple();
  int a = 0;
  int b = 1;
  int x = 0;

  int i = 0;

  ;; test
  if (n >= 15){
    i = 12;
    a = 89; ;; 10
    b = 144; ;; 11
  }

  while(i < n + k){
    if(i >= 2){
      x = a + b;
      a = b;
      b = x;
    } else {
      x = i;
    }

    if(i >= n){
      result~tpush(x);
    }

    i += 1;
  }

  return result;
}



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;work on optimization:
;; () recv_internal() {
;; }


;; ;; testable
;; (tuple) fibonacci_sequence (int n, int k) method_id {
;;   ;; optimization
;;   if(k == 0){
;;     return empty_tuple();
;;   }
  
;;   tuple result = empty_tuple();
;;   int a = 0;
;;   int b = 1;
;;   int x = 0;

;;   int i = 0;
;;   while(i < n + k){
;;     if(i >= 2){
;;       x = a + b;
;;       a = b;
;;       b = x;
;;     } else {
;;       x = i;
;;     }
;;     if(i >= n){
;;       result~tpush(x);
;;     }

;;     i += 1;
;;   }

;;   return result;
;;   ;; return null();
;; }




;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;accepted answer:
;; () recv_internal() {
;; }

;; ;; testable
;; (tuple) fibonacci_sequence (int n, int k) method_id {
;;   int a = 0;
;;   int b = 1;
;;   tuple result = empty_tuple();
;;   int x = 0;

;;   ;; optimization
;;   if(k == 0){
;;     return result;
;;   }

;;   int i = 0;
;;   while(i < n + k){
;;     if(i == 0){
;;       x = 0;
;;     } else {
;;       if(i == 1){
;;         x = 1;
;;       } else {
;;         x = a + b;
;;         a = b;
;;         b = x;
;;       }
;;     }
;;     if(i >= n){
;;       result~tpush(x);
;;     }

;;     i += 1;
;;   }

;;   return result;
;;   ;; return null();
;; }

