;; {- 
;;   TASK 3 - Find and replace binary substring
;;   Binary string is represented as a cell linked list: string splitted to chunks,
;;   first chunk stored to the root cell, next one to the cell in ref and so on;
;;   each cell can have only one ref. 
;;   Write the method that find and replaces one flags in the binary string
;;   with another value. Flags and values can be can be of any length, but
;;   strictly up to 128 bits. The method must replace every flag it finds.
;;   Flag and the value to be replaced is guaranteed to be greater than 0.
;;   Lets give a simple example. We have the target flag 101110101 and the value
;;   to be written 111111111 as inputs, and a linked list of cells, in which the bit
;;   value of the first cell ends with ...10100001011, and in the ref we have cell that
;;   starts with 10101000111111...
;;   The output should be a linked list where the first
;;   cell ends with ...10100001111, and the second cell starts with 11111000111111...

;; -}
;; ;; target          endWith    startWith         
;; ;; 101110101       1010000101110101000111111
;; ;; 111111111       1010000111111111000111111
;; ;;

() recv_internal() {
}

(int) tlen(tuple t) asm "TLEN";
;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX"; ;; causes compile error
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";
int slice_data_empty?(slice s) asm "SDEMPTY";
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX"; ;; causes compile error
(slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";
(slice, int) ~load_uint(slice s, int len) asm( -> 1 0) "LDUX";
int slice_bits(slice s) asm "SBITS";
int slice_refs(slice s) asm "SREFS";
(int, int) slice_bits_refs(slice s) asm "SBITREFS";


;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; debug
  return linked_list;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; debug


  cs = linked_list.begin_parse();

  tuple tp = empty_tuple();
  tuple sizes = empty_tuple();
  
  slice cs_only_data = cs.preload_bits(cs.slice_bits());
  tp~tpush(cs_only_data);
  sizes~tpush(cs.slice_bits());

  while(cs.slice_refs_empty?() != -1){
    cell ref = cs~load_ref();
    cs = ref.begin_parse();

    cs_only_data = cs.preload_bits(cs.slice_bits());
    tp~tpush(cs_only_data);
    sizes~tpush(cs.slice_bits());
  }

;;   return begin_cell().end_cell();
}


;; useful links:
;; https://docs.ton.org/develop/func/cookbook#how-to-get-only-data-bits-from-a-slice-without-refs
;; https://docs.ton.org/develop/func/statements#until-loop