;; {- 
;;   TASK 3 - Find and replace binary substring
;;   Binary string is represented as a cell linked list: string splitted to chunks,
;;   first chunk stored to the root cell, next one to the cell in ref and so on;
;;   each cell can have only one ref. 
;;   Write the method that find and replaces one flags in the binary string
;;   with another value. Flags and values can be can be of any length, but
;;   strictly up to 128 bits. The method must replace every flag it finds.
;;   Flag and the value to be replaced is guaranteed to be greater than 0.
;;   Lets give a simple example. We have the target flag 101110101 and the value
;;   to be written 111111111 as inputs, and a linked list of cells, in which the bit
;;   value of the first cell ends with ...10100001011, and in the ref we have cell that
;;   starts with 10101000111111...
;;   The output should be a linked list where the first
;;   cell ends with ...10100001111, and the second cell starts with 11111000111111...

;; -}
;; ;; target          endWith    startWith         
;; ;; 101110101       1010000101110101000111111
;; ;; 111111111       1010000111111111000111111
;; ;;

;; () recv_internal() {
;; }

;; (int) tlen(tuple t) asm "TLEN";
;; slice begin_parse(cell c) asm "CTOS";
;; int slice_refs(slice s) asm "SREFS";
;; (slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";


;; ;; testable
;; (cell) find_and_replace(int flag, int value, cell linked_list) method_id {
;;   tuple tp = empty_tuple();
;;   cell cl = linked_list;
;;   int run_loop = -1;
;;   while(run_loop){
;;     slice cs = cl.begin_parse();
;;     int data = cs~load_uint(128);
;;     tp.tpush(data);


;;     if(cs.slice_refs() == 1){
;;       cl = cl~load_ref();
;;     } else {
;;       run_loop = 0;
;;     }
;;   }
;;   return begin_cell().end_cell();
;; }

