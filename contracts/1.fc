{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}



;; third method: final answer
() recv_internal() {
}

int cell_hash(cell c) asm "HASHCU";
slice begin_parse(cell c) asm "CTOS";
int slice_refs(slice s) asm "SREFS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
cell preload_ref(slice s) asm "PLDREF";


;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  if(tree.cell_hash() == hash){
    return tree;
  }
  slice cs = tree.begin_parse();
  int ref_count = cs.slice_refs();
  repeat(ref_count){
    cell ref = cs~preload_ref();
    cell ref_result = find_branch_by_hash(hash, ref);
    if(ref_result.begin_parse().slice_empty?() == 0){ ;; if answer is found in this branch
      return ref_result;
    }
  }
  return begin_cell().end_cell(); ;; base condition -> 5 of 13 or passed with this
}








;; ;; second method: only return from one of 4 main branches 12 / 13 passed with this
;; () recv_internal() {
;; }

;; int cell_hash(cell c) asm "HASHCU";
;; int cell_null?(cell c) asm "ISNULL";
;; slice begin_parse(cell c) asm "CTOS";
;; int slice_refs(slice s) asm "SREFS";
;; (slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
;; cell preload_ref(slice s) asm "PLDREF";
;; tuple empty_tuple() asm "NIL";


;; ;; testable
;; (cell) find_branch_by_hash(int hash, cell tree) method_id {
;;   slice cs = tree.begin_parse();
;;   int ref_count = cs.slice_refs();
;;   repeat(ref_count){
;;     cell ref = cs~load_ref(); ;; load cell from slice cs
;;     if(ref.cell_hash() == hash){
;;       return ref;
;;     }
;;     cell ref_result = find_branch_by_hash(hash, ref);
;;     if(ref_result.begin_parse().slice_empty?() == 0){ ;; if answer is found in this branch
;;       return ref_result;
;;     }
;;   }


;;   return begin_cell().end_cell(); ;; base condition -> 5 of 13 or passed with this
;; }








;; ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;first version: considering tree with realism
;; () recv_internal() {
;; }

;; int cell_hash(cell c) asm "HASHCU";
;; int cell_null?(cell c) asm "ISNULL";
;; slice begin_parse(cell c) asm "CTOS";
;; int slice_refs(slice s) asm "SREFS";
;; (slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
;; cell preload_ref(slice s) asm "PLDREF";
;; tuple empty_tuple() asm "NIL";


;; global int found_cell;
;; global int found_root;

;; ;; testable
;; (cell) find_branch_by_hash(int hash, cell tree) method_id {
;;   ;; only executed once in the specific golden cell
;;   if(hash == tree.cell_hash()){
;;     found_cell = -1; ;; true
;;     if(tree.begin_parse().slice_refs() > 1){
;;       found_root = -1;
;;     } else {
;;       found_root = 0;
;;       ;; found_root = -1; ;; debug
;;     }
;;     return tree;
;;   }


;;   slice cs = tree.begin_parse();
;;   int ref_count = cs.slice_refs();
;;   repeat(ref_count){
;;     cell ref = cs~load_ref(); ;; load cell from slice cs
;;     cell ref_result = find_branch_by_hash(hash, ref);

;;     if(ref_result.begin_parse().slice_empty?() == 0){ ;; if answer is found in this branch
;;       if(found_root){
;;         ;; return ref; ;; debug
;;         return ref_result;
;;       } else {
;;         slice ref_cs = ref.begin_parse();
;;         int ref_ref_count = ref_cs.slice_refs();
;;         if(ref_ref_count > 1){
;;           found_root = -1;
;;         }
;;         return ref;
;;       }
;;     }
;;   }
  

;;   return begin_cell().end_cell(); ;; base condition -> 5 of 13 or passed with this
;; }





;; method 2 for loop
;; while (cs.slice_refs_empty?() != -1) { ;; we should remind that -1 is true
;;   cell ref = cs~load_ref(); ;; load cell from slice cs
;;   find_branch_by_hash(hash, ref);
;; }


;; if(ref_result.cell_null?() == 0){ ;; old method, apparently wrong


;; good links for me
;; https://docs.ton.org/develop/func/cookbook#how-to-write-a-while-loop
;; https://docs.ton.org/develop/func/cookbook#how-to-iterate-cell-tree-recursively