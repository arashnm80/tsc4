{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

int cell_hash(cell c) asm "HASHCU";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
cell preload_ref(slice s) asm "PLDREF";
tuple empty_tuple() asm "NIL";
int slice_refs(slice s) asm "SREFS";
slice begin_parse(cell c) asm "CTOS";
int cell_null?(cell c) asm "ISNULL";


global int found_cell;
global int found_root;

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  ;; only executed once in the specific golden cell
  if(hash == tree.cell_hash()){
    found_cell = -1; ;; true
    if(tree.begin_parse().slice_refs() > 1){
      found_root = -1;
    } else {
      found_root = 0;
    }
    return tree;
    return begin_cell().end_cell();
  }


  slice cs = tree.begin_parse();
  int ref_count = cs.slice_refs();
  repeat(ref_count){
    cell ref = cs~load_ref(); ;; load cell from slice cs
    cell ref_result = find_branch_by_hash(hash, ref);

    if(ref_result.cell_null?() == 0){ ;; if answer is found in this branch
      if(found_root){
        return ref_result;
      } else {
        slice ref_cs = ref.begin_parse();
        int ref_ref_count = ref_cs.slice_refs();
        if(ref_ref_count > 1){
          found_root = -1;
        }
        return ref;
      }
    }
  }
  

  ;; return begin_cell().end_cell(); ;; base condition -> 5 of 13 or passed with this
}


;; method 2 for loop
;; while (cs.slice_refs_empty?() != -1) { ;; we should remind that -1 is true
;;   cell ref = cs~load_ref(); ;; load cell from slice cs
;;   find_branch_by_hash(hash, ref);
;; }


;; good links for me
;; https://docs.ton.org/develop/func/cookbook#how-to-write-a-while-loop