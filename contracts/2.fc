{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

() recv_internal() {
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;method 1
;; ;; testable
;; (tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
;;   ;; A: a * b    B: b * c
;;   ;; define variabls:
;;   int ai = 0;
;;   int bi = 0;
;;   int ci = 0;
;;   int temp = 0;
  
;;   ;;;;;;;;;;;;;;;;;;;; to-do: repeat iteration 
;;   int c = matrixB.at(0).tuple_length();
;;   int b = matrixB.tuple_length();
;;   if(is_tuple(matrixA)){
;;     int a = matrixA.tuple_length();
;;   }

;;   ai = 0;
;;   tuple result = empty_tuple();

;;   while(ai < matrixA.tuple_length()){
;;     ci = 0;
;;     tuple line = empty_tuple();

;;     while(ci < matrixB.at(0).tuple_length()){
;;       bi = 0;
;;       temp = 0;

;;       while(bi < matrixB.tuple_length()){
;;         temp = temp + matrixA.at(ai).at(bi) + matrixB.at(bi).at(ci);
;;         bi = bi + 1;
;;       }

;;       line~tpush(temp);
;;       ci = ci + 1;
;;     }

;;     result~tpush(line);
;;     ai = ai + 1;
;;   }

;;   return result;
;;   ;; return null();
;; }


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;method 2 accepted and very optimized 5.97 / 6
;; forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
;; int tuple_length (tuple t) asm "TLEN";
;; forall X -> (tuple) to_tuple (X x) asm "NOP";
;; ;; testable
;; (tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
;;   ;; A: a * b    B: b * c
;;   ;; define variabls:
;;   int ai = 0;
;;   int bi = 0;
;;   int ci = 0;
;;   int temp = 0;
;;   int c = matrixB.at(0).tuple_length();
;;   int b = matrixB.tuple_length();
;;   int a = matrixA.tuple_length();

;;   ai = 0;
;;   tuple result = empty_tuple();

;;   while(ai < matrixA.tuple_length()){
;;     ci = 0;
;;     tuple line = empty_tuple();

;;     while(ci < matrixB.at(0).tuple_length()){
;;       bi = 0;
;;       temp = 0;

;;       while(bi < matrixB.tuple_length()){
;;         temp = temp + matrixA.at(ai).at(bi) * matrixB.at(bi).at(ci);
;;         bi = bi + 1;
;;       }

;;       line~tpush(temp);
;;       ci = ci + 1;
;;     }

;;     result~tpush(line);
;;     ai = ai + 1;
;;   }

;;   return result;
;;   ;; return null();
;; }