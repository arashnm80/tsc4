{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX"; ;; causes compile error
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";
int slice_data_empty?(slice s) asm "SDEMPTY";
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX"; ;; causes compile error
(slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";
(slice, int) ~load_uint(slice s, int len) asm( -> 1 0) "LDUX";
int slice_bits(slice s) asm "SBITS";
int slice_refs(slice s) asm "SREFS";

;; global int first_cell;

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder output = begin_cell();
  slice cs = text.begin_parse();

  slice cs_copy = cs;
  int flag = cs~load_int(32);
  if(flag == 0){
    output.store_int(flag, 32);
  } else {
    cs = cs_copy;
  }
  
  int ref_count = cs.slice_refs();
  if(ref_count > 0){
    cell ref = cs~load_ref();
    cell ref_ceasar = caesar_cipher_encrypt(shift, ref);
    output.store_ref(ref_ceasar);
  }

  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; debug begin
  ;; ;; if(cs.slice_bits() % 8 == 0){
  ;; ;;   return begin_cell().store_int(flag, 32).store_slice(cs).end_cell();
  ;; ;; }
  ;; ;; int debug = -1;
  ;; ;; if(debug){
  ;; ;;   ;; return begin_cell().store_int(flag, 32).store_slice(cs).end_cell();
  ;; ;;   if(new_char == char){
  ;; ;;     return text;
  ;; ;;   }
  ;; ;; }
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; debug end
  while(~ cs.slice_data_empty?()){
  ;; repeat(cs.slice_bits() % 8){
    int char = cs~load_uint(8);
    int new_char = (char + shift) % 256;
    new_char = char; ;; debug
    output.store_uint(new_char, 8);
  }
  return output.end_cell();
  return begin_cell().end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int reverse_shift = - shift;
  return caesar_cipher_encrypt(reverse_shift, text);
}


;; useful links:
;; https://docs.ton.org/develop/func/literals_identifiers#string-literals
;; https://docs.ton.org/develop/func/statements#operators
;; https://docs.ton.org/develop/smart-contracts/fees#how-to-calculate-fees
;; https://docs.ton.org/develop/howto/fees-low-level#computation-fees