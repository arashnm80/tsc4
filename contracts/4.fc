{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX"; ;; causes compile error
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";
int slice_data_empty?(slice s) asm "SDEMPTY";
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX"; ;; causes compile error
(slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";
(slice, int) ~load_uint(slice s, int len) asm( -> 1 0) "LDUX";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {

  ;; debug
  ;; cell test = begin_cell().store_slice(cs).end_cell();
  ;; return test;

  slice cs = text.begin_parse();
  ;; ;; int flag = cs~load_int(32);
  builder output = begin_cell();
  while(~ cs.slice_data_empty?()){
    int char = cs~load_uint(1);
    output.store_int(char, 1);
  }
  return output.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int reverse_shift = - shift;
  return caesar_cipher_encrypt(reverse_shift, text);
}


;; useful links:
;; https://docs.ton.org/develop/func/literals_identifiers#string-literals